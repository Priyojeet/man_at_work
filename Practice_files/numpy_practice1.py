import numpy as np
a = np.zeros((10,2))
b = a.T
c = b.view()
print(b)
print(c)
c[0] = 1
print(c)
print(c,"\n",b)
#print(c.shape((2,10))) it's lead you to an error.

a = np.arange(6).reshape((3,2))
print(a)
print(np.reshape(a, (2,3)))
print(np.reshape(np.ravel(a), (2,3)))
print(np.reshape(a, (2,3), order='F'))
print(np.reshape(np.ravel(a, order='F'), (2,3), order='F'))

a = np.array([[1,2,3],[4,5,6]])
print(a)
print(np.reshape(a,6))
print(np.reshape(a, 6, order='F'))
print(np.reshape(a,(3,-1)))

x = np.array([[1, 2, 3], [4, 5, 6]])
print(np.ravel(x))
print(x.reshape(-1))
print(np.ravel(x, order='F'))
print(np.ravel(x.T))
print(np.ravel(x.T, order='A'))

a = np.arange(3)[::-1]; a
print(a.ravel(order='C'))
print(a.ravel(order='K'))
print("break point")
a = np.arange(12).reshape(2,3,2).swapaxes(1,2);a
print(a)
print(a.ravel(order='C'))
print(a.ravel(order='K'))

x = np.zeros((3,4,5))
print(x)
print(np.moveaxis(x, 0, -1).shape)
print(np.moveaxis(x, -1, 0).shape)
print(np.transpose(x).shape)
print(np.swapaxes(x, 0, -1).shape)
print(np.moveaxis(x, [0, 1], [-1, -2]).shape)
print(np.moveaxis(x, [0, 1, 2], [-1, -2, -3]).shape)

print("next")
x = np.arange(4).reshape((2,2))
print(x)
x = np.ones((1,2,3))
print(x)
print(np.transpose(x, (1,0,2)).shape)
x = np.arange(9.0).reshape(3,3)
print(x)
print(np.atleast_1d(x))
print(np.atleast_1d(x) is x)
print(np.atleast_1d(1, [3,4]))
print(np.atleast_2d(3.0))

print("see what next")

x = np.arange(3.0)
print(np.atleast_2d(x))
print(np.atleast_2d(x).base is x)
print(np.atleast_2d(1, [1,2], [[1, 2]]))

x = np.arange(12.0).reshape(4,3)
print(x)
print(np.atleast_3d(x).shape)
print(np.atleast_3d(x).base is x.base)

for arr in np.atleast_3d([1,2], [[1,2]],[[[1,2]]]):
    print(arr, arr.shape)

x = np.array([1,2,3])
print(x)
print(np.broadcast_to(x, (3,3)))

x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
print(x)
print(np.broadcast_to(x, (13,len(x))))

x = np.array([[1,2,3]])
print(x)
y = np.array([[1],[2],[3]])
print(y)
print(np.broadcast_arrays(x,y))
print([np.array(a) for a in np.broadcast_arrays(x,y)])

# expand the shape of an array
print("expanding the shape of an array")
x = np.array([1,2])
print(x)
print(x.shape)
y = np.expand_dims(x, axis=0)
print(y)
print(y.shape)
y = np.expand_dims(x, axis=1)
print(y)
print(y.shape)
print(np.newaxis is None)
x = np.array([[[0], [1], [2]]])
print(x)
print(x.shape)
print(np.squeeze(x).shape)
print(np.squeeze(x, axis=0).shape)
#print(np.squeeze(x, axis=1).shape) error there is axis equivalent to 1
print(np.squeeze(x, axis=2).shape)
print(np.asfarray([2,3]))
print(np.asfarray([2,3], dtype='float'))
print(np.asfarray([2,3], dtype='int8'))
a = np.array([[1,2],[3,4]])
print(a)
b = np.array([[5,6]])
print(b)
print(np.concatenate((a,b), axis=0))
print(np.concatenate((a,b.T), axis=1))
a = np.ma.arange(3)
print("here the thing you r searching for",a)
a[1] = np.ma.masked
print(a)
b = np.arange(2,5)
print(b)
print(np.concatenate([a,b]))
print(np.ma.concatenate([a,b]))
print([np.random.randn(3,4) for _ in range(10)])
print("check this out")
arrays = [np.random.randn(3,4) for _ in range(10)]
print(np.stack(arrays, axis=0).shape)
print(np.stack(arrays, axis=1).shape)
print(np.stack(arrays, axis=2).shape)

print("stacking")
a = np.array([1,2,3])
print(a)
b = np.array([2,3,4])
print(b)
print(np.stack((a,b)))
print(np.stack((a,b), axis=-1))
print(np.column_stack((a,b)))  # col wise
print(np.dstack((a,b)))  # depth wise
print(np.hstack((a,b)))  # horizontal stack
print(np.vstack((a,b)))  # vertical stacking

print("splitting")
x = np.arange(12.0)
print(x)
print(np.split(x, [3, 5, 6, 10]))
print(np.split(x, [3, 5, 6, 10, 12]))
print(np.split(x, [5]))
print(np.array_split(x, [5]))

x = np.arange(16.0).reshape(2, 2, 4)
print(x)
print(np.dsplit(x,2))
print(np.dsplit(x, np.array([3, 6])))
print(np.hsplit(x, 2))
print(np.hsplit(x, np.array([3, 6])))
print(np.vsplit(x,2))
print(np.vsplit(x, np.array([3, 6])))
print(np.tile(x, 2))
print(np.tile(x, (4,1)))

print("repeat functions")
print(np.repeat(x, 2))
print(np.repeat(x, 3, axis=1))
print(np.repeat(x, [1,2], axis=0))
print(np.repeat(x, [1,2], axis=1))
print(np.delete(x, 1, 0))
print(np.delete(x, np.s_[::2], 1))
print(np.delete(x, [1,3,5], None))

print("insert values in array")
print(np.insert(x, 1, 5))
print(np.insert(x, 1, 5, axis=1))
print(np.insert(x, [1], [[1],[2],[3]], axis=1))

y = x.flatten()
print("value of y is:-")
print(y)
print(np.insert(y, [2,2],[5,6]))
print(np.insert(y, slice(2,4), [5,6]))
print(np.insert(y, [2,2],[7.13, False]))
print(np.append([[1,2,3],[4,5,6]],[[7,8,9]], axis=0))
print(np.append([[1,2,3],[4,5,6]],[7,8,9]))
print(np.resize(x,(2,4)))
print(np.unique([1,1,2,3,3,2]))

print("unique operation")

a = np.array([[1, 1], [2, 3]])
print(a)
print(np.unique(a))

a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
print(a)
print(np.unique(a, axis=0))

a = np.array(['a', 'b', 'b', 'c', 'a'])
print(a)
u, indices = np.unique(a, return_index=True)
print(u,"\n",indices)
print(a[indices])

a = np.array([1, 2, 6, 4, 2, 3, 2])
print(a)
u, indices = np.unique(a, return_inverse=True)
print(u,"\n",indices)
print(a[indices])
print(u[indices])
